<p>Starting with Jupyter Notebook 5.0, you can customize the <code>command</code> mode shortcuts from within the Notebook Application itself.</p><p>Head to the <strong>``Help``</strong> menu and select the <strong>``Edit keyboard Shortcuts``</strong> item. A dialog will guide you through the process of adding custom keyboard shortcuts.</p><p>Keyboard shortcut set from within the Notebook Application will be persisted to your configuration file. A single action may have several shortcuts attached to it.</p><h1>Keyboard Shortcut Customization (Pre Notebook 5.0)</h1>
<p>Starting with IPython 2.0 keyboard shortcuts in command and edit mode are fully customizable. These customizations are made using the Jupyter JavaScript API. Here is an example that makes the <code>r</code> key available for running a cell:</p><div><ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">javascript</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:parameter ac:name="title">\[\ \]:</ac:parameter>
<ac:plain-text-body><![CDATA[%%javascript

Jupyter.keyboard_manager.command_shortcuts.add_shortcut('r', {
    help : 'run cell',
    help_index : 'zz',
    handler : function (event) {
        IPython.notebook.execute_cell();
        return false;
    }}
);]]></ac:plain-text-body>
</ac:structured-macro>
</div>
<p>“By default the keypress <code>r</code>, while in command mode, changes the type of the selected cell to <code>raw</code>. This shortcut is overridden by the code in the previous cell, and thus the action no longer be available via the keypress <code>r</code>.”</p><p>There are a couple of points to mention about this API:</p><ul>
<li>
<p>The <code>help_index</code> field is used to sort the shortcuts in the Keyboard Shortcuts help dialog. It defaults to <code>zz</code>.</p></li>
<li>
<p>When a handler returns <code>false</code> it indicates that the event should stop propagating and the default action should not be performed. For further details about the <code>event</code> object or event handling, see the jQuery docs.</p></li>
<li>
<p>If you don’t need a <code>help</code> or <code>help_index</code> field, you can simply pass a function as the second argument to <code>add_shortcut</code>.</p></li>
</ul>
<div><ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">javascript</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:parameter ac:name="title">\[\ \]:</ac:parameter>
<ac:plain-text-body><![CDATA[%%javascript

Jupyter.keyboard_manager.command_shortcuts.add_shortcut('r', function (event) {
    IPython.notebook.execute_cell();
    return false;
});]]></ac:plain-text-body>
</ac:structured-macro>
</div>
<p>Likewise, to remove a shortcut, use <code>remove_shortcut</code>:</p><div><ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">javascript</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:parameter ac:name="title">\[\ \]:</ac:parameter>
<ac:plain-text-body><![CDATA[%%javascript

Jupyter.keyboard_manager.command_shortcuts.remove_shortcut('r');]]></ac:plain-text-body>
</ac:structured-macro>
</div>
<p>If you want your keyboard shortcuts to be active for all of your notebooks, put the above API calls into your <code>custom.js</code> file.</p><p>Of course we provide name for majority of existing action so that you do not have to re-write everything, here is for example how to bind <code>r</code> back to it’s initial behavior:</p><div><ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">javascript</ac:parameter>
<ac:parameter ac:name="linenumbers">false</ac:parameter>
<ac:parameter ac:name="title">\[\ \]:</ac:parameter>
<ac:plain-text-body><![CDATA[%%javascript

Jupyter.keyboard_manager.command_shortcuts.add_shortcut('r', 'jupyter-notebook:change-cell-to-raw');]]></ac:plain-text-body>
</ac:structured-macro>
</div>
